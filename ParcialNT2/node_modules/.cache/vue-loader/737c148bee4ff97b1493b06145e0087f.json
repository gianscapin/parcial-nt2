{"remainingRequest":"/home/gianfranco/Desktop/NT_TP/ParcialNT2/Proyecto/ParcialNT2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/gianfranco/Desktop/NT_TP/ParcialNT2/Proyecto/ParcialNT2/src/components/FormularioAv/src/componentes/Formulario.html?vue&type=template&id=8cb5388c&scoped=true&","dependencies":[{"path":"/home/gianfranco/Desktop/NT_TP/ParcialNT2/Proyecto/ParcialNT2/src/components/FormularioAv/src/componentes/Formulario.html","mtime":1623368674307},{"path":"/home/gianfranco/Desktop/NT_TP/ParcialNT2/Proyecto/ParcialNT2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/gianfranco/Desktop/NT_TP/ParcialNT2/Proyecto/ParcialNT2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}